import passport from 'passport';
const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcryptjs');
import * as usersDao from '../daos/users-daos'; 


passport.serializeUser<any, any>((user, done) => done(null, user.ers_users_id))

passport.deserializeUser((ers_users_id: number, done) => done(null, usersDao.getUserById(ers_users_id)))

function initialize(passport: any) {
    const authenticateUser = (username: string, password: string, done: Function) => {
      console.log('authenticate ' + username);
        // Match User
        usersDao
            .getUserByName(username)
            .then((user: any) => {
                if (!user) {
                    return done(null, false, 'Invalid username/password.')
                } else {
                    // Match password
                    bcrypt.compare(password, user.ers_password, (err: Error, isMatch: boolean) => {
                        if (err) throw err

                        if (isMatch) {
                            return done(null, user, { message: 'Login successful.' })
                        } else {
                            return done(null, false, { message: 'Invalid username/password.' })
                        }
                    })
                }
            })
            .catch((err: Error) => {
                return done(null, false, { message: err })
            })
    }

    passport.use(new LocalStrategy({ usernameField: 'username', passwordField: 'password' },
        authenticateUser))
}

module.exports = initialize